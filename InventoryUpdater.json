/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author User
 */
public class InventoryUpdater {
    function updateInventory(arr1, arr2) {

    // Variable for location of product
    var index;

    // A helper method to return the index of a specified product (undefined if not found)
    var getProductIndex = function (name) {
        for (var i = 0; i < this.length; i++) {
            if (this[i][1] === name) {
                return i;
            }
        }
        return undefined;
    }

    // For each item of the new Inventory
    for (var i = 0; i < arr2.length; i++) {

        // Invoke our helper function using arr1 as this
        index = getProductIndex.call(arr1, arr2[i][1]);

        // If the item doesn't exist
        if (index === undefined) {
            // Push the entire item
            arr1.push(arr2[i]);
        } else {
            // Add the new quantity of the current item
            arr1[index][0] += arr2[i][0];
        }

    }

    // Sort alphabetically, by the product name of each item
    arr1.sort(function (a, b) {
        if (a[1] > b[1]) {
            return 1;
        }
        if (a[1] < b[1]) {
            return -1;
        }
        return 0;
    });

    return arr1;
}

// test here
// Example inventory lists
var curInv = [
    [21, "Bowling Ball"],
    [2, "Dirty Sock"],
    [1, "Hair Pin"],
    [5, "Microphone"]
];

var newInv = [
    [2, "Hair Pin"],
    [3, "Half-Eaten Apple"],
    [67, "Bowling Ball"],
    [7, "Toothpaste"]
];

updateInventory(curInv, newInv);

function updateInventory(arr1, arr2) {
  // All inventory must be accounted for or you're fired!

  var index;
  var arrCurInvName = []; // Names of arr1's items
  var arrNeInvName = []; // Names of arr2's items

  // Same as using two for loops, this takes care of increasing the number of stock quantity.
  arr1.map(function(item1) {
    return arr2.map(function(item2) {
      if (item1[1] === item2[1]) {
        item1[0] = item1[0] + item2[0]; //Increase number of stock
      }
    });
  });

  // Get item's name for new Inventory
  arr2.map(function(item) {
    arrNeInvName.push(item[1]);
  });

  // Get item's name for Current Inventory
  arr1.map(function(item) {
    arrCurInvName.push(item[1]);
  });

  // Add new inventory items to current inventory.
  arrNeInvName.map(function(item) {
    if (arrCurInvName.indexOf(item) === -1) {
      index = arrNeInvName.indexOf(item);
      arr1.push(arr2[index]);
    }
  });

  // Sort the array alphabetically using the second element of the array as base.
  arr1.sort(function(currItem, nextItem) {

    //Ternary function to avoid using if else
    return currItem[1] > nextItem[1] ? 1 : -1;
  });

  return arr1;
}

// test here
// Example inventory lists
var curInv = [
    [21, "Bowling Ball"],
    [2, "Dirty Sock"],
    [1, "Hair Pin"],
    [5, "Microphone"]
];

var newInv = [
    [2, "Hair Pin"],
    [3, "Half-Eaten Apple"],
    [67, "Bowling Ball"],
    [7, "Toothpaste"]
];

updateInventory(curInv, newInv);
$client = new SoapClient('http://magentohost/api/soap/?wsdl');

// If somestuff requires api authentication,
// then get a session token
$session = $client->login('apiUser', 'apiKey');

$productId = '1';
$stockItemData = array(
    'qty' => '100',
    'is_in_stock ' => 1,
    'manage_stock ' => 1,
    'use_config_manage_stock' => 0,
    'min_qty' => 2,
    'use_config_min_qty ' => 0,
    'min_sale_qty' => 1,
    'use_config_min_sale_qty' => 0,
    'max_sale_qty' => 10,
    'use_config_max_sale_qty' => 0,
    'is_qty_decimal' => 0,
    'backorders' => 1,
    'use_config_backorders' => 0,
    'notify_stock_qty' => 10,
    'use_config_notify_stock_qty' => 0
);

$result = $client->call(
    $session,
    'product_stock.update',
    array(
        $productId,
        $stockItemData
    )
);
window.getConsumables = function () {
	return State.variables.Consumables;
};

Macro.add([ "initConsumables", "emptyConsumables" ], {
	handler : function () {
		State.variables.Consumables = [];
		
		State.variables.Consumables.findByID = function(obj) {
			if (this.length === 0) {
				return false;
			}
			if (typeof obj !== "object" || !obj.hasOwnProperty("id")) {
				return false;
			}
			var idx = this.findIndex(function (item) {
				return item.id === obj.id;
			});
			return (idx !== -1);
		};
	}
});

Macro.add("addToConsumables", {
	handler : function () {
		if (this.args.length === 0) {
			return this.error("no Consumables item specified");
		}
		var obj = this.args[0];
		if (typeof obj !== "object" || !obj.hasOwnProperty("id")) {
			return this.error("Consumables item malformed");
		}
		var idx = State.variables.Consumables.findIndex(function (item) {
			return item.id === obj.id;
		});
		if (idx === -1) {
			State.variables.Consumables.push(obj);
		}
		else {
			State.variables.Consumables[idx].amount++;
		}
	}
});

Macro.add("removeSingleConsumables", {
	handler : function () {
		if (this.args.length === 0) {
			return this.error("no Consumables item specified");
		}
		var obj = this.args[0];
		if (typeof obj !== "object" || !obj.hasOwnProperty("id")) {
			return this.error("Consumables item malformed");
		}
		var idx = State.variables.Consumables.findIndex(function (item) {
			return item.id === obj.id;
		});
		if (idx !== -1) {
			if(State.variables.Consumables[idx].amount > 1){
				State.variables.Consumables[idx].amount--;
			}
			else if (State.variables.Consumables[idx].amount == 1) {
				State.variables.Consumables.splice(idx , 1);
		}}
	}
});

Macro.add("removeFromConsumables", {
	handler : function () {
		if (this.args.length === 0) {
			return this.error("no Consumables item specified");
		}
		var obj = this.args[0];
		if (typeof obj !== "object" || !obj.hasOwnProperty("id")) {
			return this.error("Consumables item malformed");
		}
		var idx = State.variables.Consumables.findIndex(function (item) {
			return item.id === obj.id;
		});
		if (idx !== -1) {
			State.variables.Consumables.splice(idx , 1);
		}
	}
});

Macro.add("Consumables", {
	handler : function () {
		if (State.variables.Consumables.length === 0) {
			new Wikifier(this.output, 'nothing');
		} else {
			new Wikifier(
				this.output,
				'[[' + State.variables.Consumables.map(function (item) {
					return item.id;
				}).join(']]<br>[[') + ']]');
		}
	}
});

Macro.add('ConsumablesWithLinks', {
	handler : function () {
		var $list = $(document.createDocumentFragment());

		if (State.variables.Consumables.length === 0) {
			$list.text('nothing');
		}
		else {
			State.variables.Consumables.forEach(function (item) {
				$list
					.wiki('[[' + item.id + ']]')
					.append('\u00A0\u00D7' + item.amount)
					.append('<br>');
			});
		}

		$list.appendTo(this.output);
	}
});
public class Stock {

private String companyName;
private String stockRating;
private int price;
private int numberOfShares;

public String getCompanyName() {
    return companyName;
}

public int getStockRating() {
    return stockRating;
}

public String getPrice() {
    return price;
}

public int getNumberOfShares() {
    return numberOfShares;
}

public Stock(String companyName, String stockRating, int price, int numberOfShares) {
    super();
    this.companyName = companyName;
    this.stockRating = stockRating;
    this.price = price;
    this.numberOfShares = numberOfShares;
}

import java.util.*;

public class StockInvetory {

private static final int INVENTORY_SIZE = 12;
private Stock [] stocks;

public StockInvetory() {
    stocks = new Stock [INVENTORY_SIZE];

}

private static void StockInventory() {
       for (int i = 0; i<INVENTORY_SIZE; i++){
         Scanner console = new Scanner(System.in);

    System.out.println ("Stock's name:");
    String stockName = console.next();

    System.out.println ("Stock's rating");
    String stockRating= console.next();

    System.out.println ("Stock's price:");
    int stockPrice = console.nextInt();

    System.out.println ("Numbers of shares: ");
    int numberShares= console.nextInt();

          stocks [i]= new Stock(stockName, stockRatings, stockPrice, numberShares);
    }

public static void main (String [] args){
    StockInventory();



}

function updateInventory(arr1, arr2) {

    // Variable for location of product
    var index;

    // A helper method to return the index of a specified product (undefined if not found)
    var getProductIndex = function (name) {
        for (var i = 0; i < this.length; i++) {
            if (this[i][1] === name) {
                return i;
            }
        }
        return undefined;
    }

    // For each item of the new Inventory
    for (var i = 0; i < arr2.length; i++) {

        // Invoke our helper function using arr1 as this
        index = getProductIndex.call(arr1, arr2[i][1]);

        // If the item doesn't exist
        if (index === undefined) {
            // Push the entire item
            arr1.push(arr2[i]);
        } else {
            // Add the new quantity of the current item
            arr1[index][0] += arr2[i][0];
        }

    }

    // Sort alphabetically, by the product name of each item
    arr1.sort(function (a, b) {
        if (a[1] > b[1]) {
            return 1;
        }
        if (a[1] < b[1]) {
            return -1;
        }
        return 0;
    });

    return arr1;
}

// test here
// Example inventory lists
var curInv = [
    [21, "Bowling Ball"],
    [2, "Dirty Sock"],
    [1, "Hair Pin"],
    [5, "Microphone"]
];

var newInv = [
    [2, "Hair Pin"],
    [3, "Half-Eaten Apple"],
    [67, "Bowling Ball"],
    [7, "Toothpaste"]
];

updateInventory(curInv, newInv);

function updateInventory(arr1, arr2) {
  // All inventory must be accounted for or you're fired!

  var index;
  var arrCurInvName = []; // Names of arr1's items
  var arrNeInvName = []; // Names of arr2's items

  // Same as using two for loops, this takes care of increasing the number of stock quantity.
  arr1.map(function(item1) {
    return arr2.map(function(item2) {
      if (item1[1] === item2[1]) {
        item1[0] = item1[0] + item2[0]; //Increase number of stock
      }
    });
  });

  // Get item's name for new Inventory
  arr2.map(function(item) {
    arrNeInvName.push(item[1]);
  });

  // Get item's name for Current Inventory
  arr1.map(function(item) {
    arrCurInvName.push(item[1]);
  });

  // Add new inventory items to current inventory.
  arrNeInvName.map(function(item) {
    if (arrCurInvName.indexOf(item) === -1) {
      index = arrNeInvName.indexOf(item);
      arr1.push(arr2[index]);
    }
  });

  // Sort the array alphabetically using the second element of the array as base.
  arr1.sort(function(currItem, nextItem) {

    //Ternary function to avoid using if else
    return currItem[1] > nextItem[1] ? 1 : -1;
  });

  return arr1;
}

// test here
// Example inventory lists
var curInv = [
    [21, "Bowling Ball"],
    [2, "Dirty Sock"],
    [1, "Hair Pin"],
    [5, "Microphone"]
];

var newInv = [
    [2, "Hair Pin"],
    [3, "Half-Eaten Apple"],
    [67, "Bowling Ball"],
    [7, "Toothpaste"]
];

updateInventory(curInv, newInv);
$client = new SoapClient('http://magentohost/api/soap/?wsdl');

// If somestuff requires api authentication,
// then get a session token
$session = $client->login('apiUser', 'apiKey');

$productId = '1';
$stockItemData = array(
    'qty' => '100',
    'is_in_stock ' => 1,
    'manage_stock ' => 1,
    'use_config_manage_stock' => 0,
    'min_qty' => 2,
    'use_config_min_qty ' => 0,
    'min_sale_qty' => 1,
    'use_config_min_sale_qty' => 0,
    'max_sale_qty' => 10,
    'use_config_max_sale_qty' => 0,
    'is_qty_decimal' => 0,
    'backorders' => 1,
    'use_config_backorders' => 0,
    'notify_stock_qty' => 10,
    'use_config_notify_stock_qty' => 0
);

$result = $client->call(
    $session,
    'product_stock.update',
    array(
        $productId,
        $stockItemData
    )
);
window.getConsumables = function () {
	return State.variables.Consumables;
};

Macro.add([ "initConsumables", "emptyConsumables" ], {
	handler : function () {
		State.variables.Consumables = [];
		
		State.variables.Consumables.findByID = function(obj) {
			if (this.length === 0) {
				return false;
			}
			if (typeof obj !== "object" || !obj.hasOwnProperty("id")) {
				return false;
			}
			var idx = this.findIndex(function (item) {
				return item.id === obj.id;
			});
			return (idx !== -1);
		};
	}
});

Macro.add("addToConsumables", {
	handler : function () {
		if (this.args.length === 0) {
			return this.error("no Consumables item specified");
		}
		var obj = this.args[0];
		if (typeof obj !== "object" || !obj.hasOwnProperty("id")) {
			return this.error("Consumables item malformed");
		}
		var idx = State.variables.Consumables.findIndex(function (item) {
			return item.id === obj.id;
		});
		if (idx === -1) {
			State.variables.Consumables.push(obj);
		}
		else {
			State.variables.Consumables[idx].amount++;
		}
	}
});

Macro.add("removeSingleConsumables", {
	handler : function () {
		if (this.args.length === 0) {
			return this.error("no Consumables item specified");
		}
		var obj = this.args[0];
		if (typeof obj !== "object" || !obj.hasOwnProperty("id")) {
			return this.error("Consumables item malformed");
		}
		var idx = State.variables.Consumables.findIndex(function (item) {
			return item.id === obj.id;
		});
		if (idx !== -1) {
			if(State.variables.Consumables[idx].amount > 1){
				State.variables.Consumables[idx].amount--;
			}
			else if (State.variables.Consumables[idx].amount == 1) {
				State.variables.Consumables.splice(idx , 1);
		}}
	}
});

Macro.add("removeFromConsumables", {
	handler : function () {
		if (this.args.length === 0) {
			return this.error("no Consumables item specified");
		}
		var obj = this.args[0];
		if (typeof obj !== "object" || !obj.hasOwnProperty("id")) {
			return this.error("Consumables item malformed");
		}
		var idx = State.variables.Consumables.findIndex(function (item) {
			return item.id === obj.id;
		});
		if (idx !== -1) {
			State.variables.Consumables.splice(idx , 1);
		}
	}
});

Macro.add("Consumables", {
	handler : function () {
		if (State.variables.Consumables.length === 0) {
			new Wikifier(this.output, 'nothing');
		} else {
			new Wikifier(
				this.output,
				'[[' + State.variables.Consumables.map(function (item) {
					return item.id;
				}).join(']]<br>[[') + ']]');
		}
	}
});

Macro.add('ConsumablesWithLinks', {
	handler : function () {
		var $list = $(document.createDocumentFragment());

		if (State.variables.Consumables.length === 0) {
			$list.text('nothing');
		}
		else {
			State.variables.Consumables.forEach(function (item) {
				$list
					.wiki('[[' + item.id + ']]')
					.append('\u00A0\u00D7' + item.amount)
					.append('<br>');
			});
		}

		$list.appendTo(this.output);
	}
});
public class Stock {

private String companyName;
private String stockRating;
private int price;
private int numberOfShares;

public String getCompanyName() {
    return companyName;
}

public int getStockRating() {
    return stockRating;
}

public String getPrice() {
    return price;
}

public int getNumberOfShares() {
    return numberOfShares;
}

public Stock(String companyName, String stockRating, int price, int numberOfShares) {
    super();
    this.companyName = companyName;
    this.stockRating = stockRating;
    this.price = price;
    this.numberOfShares = numberOfShares;
}

import java.util.*;

public class StockInvetory {

private static final int INVENTORY_SIZE = 12;
private Stock [] stocks;

public StockInvetory() {
    stocks = new Stock [INVENTORY_SIZE];

}

private static void StockInventory() {
       for (int i = 0; i<INVENTORY_SIZE; i++){
         Scanner console = new Scanner(System.in);

    System.out.println ("Stock's name:");
    String stockName = console.next();

    System.out.println ("Stock's rating");
    String stockRating= console.next();

    System.out.println ("Stock's price:");
    int stockPrice = console.nextInt();

    System.out.println ("Numbers of shares: ");
    int numberShares= console.nextInt();

          stocks [i]= new Stock(stockName, stockRatings, stockPrice, numberShares);
    }

public static void main (String [] args){
    StockInventory();



}

}
